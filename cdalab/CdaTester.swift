//
//  CdaTester.swift
//  cdalab
//
//  Created by Simon Biber on 22/4/20.
//  Copyright Â© 2020 Simon Biber. All rights reserved.
//

import Foundation
import HealthKit

let data = Data(base64Encoded: "")

let start = Date(timeIntervalSinceNow: -120)
let end = Date(timeIntervalSinceNow: 0)

func test() throws
{
    let store = HKHealthStore()
    let types = Set<HKSampleType>([HKObjectType.documentType(forIdentifier: .CDA)!])
    store.requestAuthorization(toShare: types, read: types) { (success, error) in
        if success {
            save(store: store)
        } else if let error = error {
            print(error.localizedDescription)
        }
    }
    print("waiting for auth")
}

func save(store:HKHealthStore)
{
    do {
        let s = try HKCDADocumentSample(data: data!, start: start, end: end, metadata: nil)
        store.save(s) { (success, error) in
            if success {
                print("saved")
            } else {
                print(error!.localizedDescription)
            }
        }
    } catch {
        print(error)
    }
}
